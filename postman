'use strict';
//const { Mongoose } = require('mongoose');
const Book = require('../model/book.model');


// Create and Save a new Note
exports.create = (req, res) => {
    // Validate request
console.log("--------------------body",req.body);
    // console.log("re.body", req.body)
    if (!req.body.title) {
        //400 - status code
        return res.status(400).send({
            message: "Required parameter is missing"
        });
    }

    // Create a Note
    const book = new Book({
        title:req.body.title,
        author:req.body.author,
      //  author:{type:Mongoose.Schema.Types.ObjectId,ref:'author'},
        price:req.body.price,
        publishedDate:req.body.publishedDate,
        publisher:req.body.publisher
    });

    // Save Note in the database
    //Each document can be saved to the database by calling its save method. The first argument to the callback will be an error if any occurred. then() and catch() is error handling methods

    // note.save(function (err, data) {
    //     if (err) {
    //         res.status(500).send({
    //             message: err.message || "Some error occurred while creating the Note."
    //         });
    //     } else {
    //         res.send(data);
    //     }

    // });
    book.save()
        .then(data => {
            //if no error then we will be sending data in the response
            res.send(data);
        }).catch(err => {
            // if error found, we will be sending error message in the response along with status code as 500
            res.status(500).send({
                message: err.message || "Some error occurred while creating the Note."
            });
        });
};

// Retrieve and return all notes from the database.
exports.findAll = (req, res) => {
let limit=parseInt(req.query.limit);
let skip=parseInt(req.query.skip);
let sortField=(req.query.sorField);
let sortOrder=parseInt(req.query.sortOrder);
//let limit=parseInt(req.query.limit);
    // Finds documents.
    //Mongoose models provide several static helper functions for CRUD operations. 
    Book.find()
    .limit(limit)
    .skip(skip)
    .sort({[`${sortField}`]:sortOrder})
  .populate({ path: 'author', select: 'name' })
        .then(books => {
            res.send(books);
        }).catch(err => {
            res.status(500).send({
                message: err.message || "Some error occurred while retrieving notes."
            });
        });
};

// Find a single note with a noteId
exports.findOne = (req, res) => {
    //Finds a single document by its _id field. 
    Book.findById(req.params.bookId)
        .then(book => {
            if (!book) {
                return res.status(404).send({
                    message: "Note not found with id " + req.params.bookId
                });
            }else{
                res.send(book);
            }
           
        }).catch(err => {
            
            return res.status(500).send({
                message: err
            });
        });
};

// Update a note identified by the noteId in the request
exports.update = (req, res) => {
    // Validate Request
    if (!req.body.title) {
        return res.status(400).send({
            message: "Note content can not be empty"
        });
    }

    // Find note and update it with the request body
    //An object containing properties mapped to the named route “parameters”. For example, if you have the route /user/:name, then the "name" property is available as req.params.name. This object defaults to {}.
    Book.findByIdAndUpdate(req.params.bookId, {
        title:req.body.title,
        author:req.body.author,
        price:req.body.price,
        publishedDate:req.body.publishedDate,
        publisher:req.body.publisher
    }, { new: true })
        .then(book => {
            if (!book) {
                return res.status(404).send({
                    message: "Note not found with id " + req.params.bookId
                });
            }
            res.send(book);
        }).catch(err => {
            if (err.kind === 'ObjectId') {
                return res.status(404).send({
                    message: "Note not found with id " + req.params.bookId
                });
            }
            return res.status(500).send({
                message: "Error updating note with id " + req.params.bookId
            });
        });
};


// Delete a note with the specified noteId in the request
// Delete a note with the specified noteId in the request
exports.delete = (req, res) => {
    Book.findByIdAndRemove(req.params.bookId)
        .then(book => {
            if (!book) {
                return res.status(404).send({
                    message: "Book not found with id " + req.params.bookId
                });
            }else{
                res.send({ message: "Book deleted successfully!" });
            }
         
        }).catch(err => {
            return res.status(404).send({
                message: err
            });
            // if (err.kind === 'ObjectId' || err.name === 'NotFound') {
            //     return res.status(404).send({
            //         message: "Note not found with id " + req.params.noteId
            //     });
            // }
            // return res.status(500).send({
            //     message: "Could not delete note with id " + req.params.noteId
            // });
        });
};
